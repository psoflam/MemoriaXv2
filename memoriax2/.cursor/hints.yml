defaults:
  style: PEP8 and Google Python
  db: memory.db
  references:
    - The Goal/MemoriaX_Planning.txt
    - README.md
    - The Goal/MemoriaX_TODO.txt  
  goals:
    - Local memory tracking (short-term + long-term)
    - Emotion-aware interaction
    - Secure offline persistence
    - Modular AI companion UX

sections:
  '1.1':
    file: MemoriaX/storage/database.py
    instructions: Implement schema design, storage, retrieval, and consolidation using memory.db.
  '1.2':
    file: MemoriaX/ui/main_interface.py
    instructions: Design chatbot UI and ensure accessibility and responsiveness.
  '1.3':
    file: MemoriaX/nlp/tokenizer.py
    instructions: Implement tokenization and prepare for fine-tuning.
  '1.4':
    file: MemoriaX/storage/security.py
    instructions: Add AES-256 SQLite encryption and GDPR/CCPA compliance interface.
  '1.5':
    file: MemoriaX/deployment/electron.js
    instructions: Set up Electron packaging and mobile sync scaffolding.
  '1.6':
    file: MemoriaX/tests/
    instructions: Write unit and integration tests. Prepare user acceptance testing setup.
  '1.7':
    file: MemoriaX/support/feedback.py
    instructions: Add feedback capture and continuous improvement hooks.
  '2.1':
    file: MemoriaX/core/chatbot.py
    instructions: Wire NLP and memory systems into chatbot loop and consolidate memory.
  '2.2':
    file: MemoriaX/ui/persona_editor.py
    instructions: Connect persona editor to memory and make UI reactive to emotional traits.
  '2.3':
    file: MemoriaX/nlp/engine.py
    instructions: Support memory-based prompt generation and context injection.
  '2.4':
    file: MemoriaX/security/compliance.py
    instructions: Add memory export and deletion interface with SQLCipher validation.
  '2.5':
    file: MemoriaX/deployment/mobile_app.py
    instructions: Bridge Electron and mobile UI. Scaffold offline-first memory sync logic.
  '2.6':
    file: MemoriaX/tests/uat.py
    instructions: Simulate multi-day interactions and evaluate memory reliability.
  '2.7':
    file: MemoriaX/support/improvements.py
    instructions: Log retry reasons and tone shifts. Improve system via passive feedback tracking.
  '3.1':
    file: MemoriaX/core/chatbot.py
    instructions: Implement real-time memory updates and memory scoring logic.
  '3.2':
    file: MemoriaX/ui/main_interface.py
    instructions: Add memory recall visualization, interactive panels, and emotional tone editing.
  '3.3':
    file: MemoriaX/nlp/engine.py
    instructions: Support tone-driven prompt variation and semantic memory tagging.
  '4.1':
    file: MemoriaX/core/chatbot.py
    instructions: Enable multi-user local profiles and session isolation.
  '4.2':
    file: MemoriaX/ui/persona_editor.py
    instructions: Add customizable avatar UI and multi-persona dashboard support.
  '4.3':
    file: MemoriaX/nlp/voice_input.py
    instructions: Implement Whisper or Google STT integration and voice-based interaction support.
  '5.1':
    file: MemoriaX/core/plugin_loader.py
    instructions: Create safe modular plugin architecture for external companion modules.
  '5.2':
    file: MemoriaX/ui/mod_center.py
    instructions: Design mod/plugin manager UI with toggles and sandboxed display.
  '5.3':
    file: MemoriaX/nlp/persona_packs/
    instructions: Enable persona import/export, modular persona packs, and mod injection.
  '6.1':
    file: MemoriaX/core/content_control.py
    instructions: Implement NSFW filter toggles and separate handling pipeline.
  '6.2':
    file: MemoriaX/ui/settings/privacy_settings.py
    instructions: Create age verification, disclaimer flows, and visibility restrictions.
  '7.1':
    file: MemoriaX/core/persona_transfer.py
    instructions: Enable full persona and memory export/import logic.
  '7.2':
    file: MemoriaX/ui/settings/language_selector.py
    instructions: Implement multilingual UI toggles and language localization.
  '7.3':
    file: MemoriaX/nlp/translation_engine.py
    instructions: Add translation pipeline and multilingual prompt templates.